plugins {
  id 'java'
  id 'org.springframework.boot' version '3.1.1'
  id 'io.spring.dependency-management' version '1.1.0'
  id 'org.graalvm.buildtools.native' version '0.9.23'
  id 'pl.allegro.tech.build.axion-release' version '1.15.1'
  id 'maven-publish'
  id 'checkstyle'
}

apply plugin: 'java'

group = 'org.springframework.samples'
version = scmVersion.version
sourceCompatibility = '17'

checkstyle {
    toolVersion = '10.3.3'
}

repositories {
  mavenCentral()
} 

ext.webjarsFontawesomeVersion = "4.7.0"
ext.webjarsBootstrapVersion = "5.2.3"

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'javax.cache:cache-api'
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
  runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
  runtimeOnly "org.webjars.npm:bootstrap:${webjarsBootstrapVersion}"
  runtimeOnly "org.webjars.npm:font-awesome:${webjarsFontawesomeVersion}"
  runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
  runtimeOnly 'com.h2database:h2'
  runtimeOnly 'com.mysql:mysql-connector-j'
  runtimeOnly 'org.postgresql:postgresql'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation 'org.springframework.boot:spring-boot-docker-compose'
  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'org.testcontainers:mysql'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact "build/libs/best-spring-petclinic-${version}.jar"
    }
  }
  repositories {
    maven {
      def releasesRepoUrl = "http://localhost:8084/repository/maven-releases/"
      def snapshotsRepoUrl = "http://localhost:8084/repository/maven-snapshots/"
      allowInsecureProtocol = true
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      credentials {
        username = project.findProperty("mavenUser")
        password = project.findProperty("mavenPassword")
      }
    }
  }
}

jar {
    enabled = false
}


tasks.named('test') {
  useJUnitPlatform()
}

task openTestResults() {
  dependsOn 'build'
  doLast{
    def reportFile = "${project.buildDir}/reports/tests/test/index.html"
    java.awt.Desktop.getDesktop().browse(new File(reportFile).toURI())
  }
}
